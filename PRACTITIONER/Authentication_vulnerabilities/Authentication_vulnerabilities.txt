Что такое аутентификация?

Аутентификация — это процесс проверки личности пользователя или клиента. Веб-сайты потенциально доступны любому, кто подключен к Интернету. Это делает надежные механизмы аутентификации неотъемлемой частью эффективной веб-безопасности.

Существует три основных типа аутентификации:

     Что-то, что вы знаете, например пароль или ответ на секретный вопрос. Их иногда называют «факторами знаний».
     Что-то, что у вас есть. Это физический объект, например мобильный телефон или токен безопасности. Их иногда называют «факторами владения».
     Что-то, чем вы являетесь или что-то делаете. Например, ваши биометрические данные или модели поведения. Иногда их называют «факторами неотъемлемости».

Механизмы аутентификации основаны на ряде технологий для проверки одного или нескольких из этих факторов.


# В чем разница между аутентификацией и авторизацией?

Аутентификация — это процесс проверки того, что пользователь является тем, за кого себя выдает. Авторизация включает в себя проверку того, разрешено ли пользователю что-либо делать.

Например, аутентификация определяет, действительно ли кто-то, пытающийся получить доступ к веб-сайту с именем пользователя Carlos123, является тем же человеком, который создал учетную запись.

После аутентификации Carlos123 его разрешения определяют, что ему разрешено делать. Например, им может быть разрешен доступ к личной информации о других пользователях или выполнение таких действий, как удаление учетной записи другого пользователя.


# Как возникают уязвимости аутентификации?

Большинство уязвимостей в механизмах аутентификации возникают одним из двух способов:

     Механизмы аутентификации слабы, поскольку они не обеспечивают адекватной защиты от атак методом перебора.
     Логические ошибки или плохое кодирование в реализации позволяют злоумышленнику полностью обойти механизмы аутентификации. Иногда это называют «нарушенной аутентификацией».

Во многих областях веб-разработки логические ошибки приводят к неожиданному поведению веб-сайта, что может быть, а может и не быть проблемой безопасности. Однако, поскольку аутентификация очень важна для безопасности, весьма вероятно, что ошибочная логика аутентификации подвергает веб-сайт проблемам безопасности.

# Каково влияние уязвимой аутентификации?

Влияние уязвимостей аутентификации может быть серьезным. Если злоумышленник обходит аутентификацию или грубо проникает в учетную запись другого пользователя, он получает доступ ко всем данным и функциям, которые есть в скомпрометированной учетной записи. Если им удастся скомпрометировать учетную запись с высоким уровнем привилегий, например учетную запись системного администратора, они смогут получить полный контроль над всем приложением и потенциально получить доступ к внутренней инфраструктуре.

# Каково влияние уязвимой аутентификации? - Продолжение

Даже компрометация учетной записи с низким уровнем привилегий все равно может предоставить злоумышленнику доступ к данным, которых в противном случае у него не было бы, например к коммерческой конфиденциальной деловой информации. Даже если у учетной записи нет доступа к каким-либо конфиденциальным данным, она все равно может позволить злоумышленнику получить доступ к дополнительным страницам, которые предоставляют дополнительную поверхность для атаки. Зачастую серьёзные атаки невозможны с общедоступных страниц, но они возможны с внутренней страницы.


# Уязвимости входа в систему по паролю

На веб-сайтах, использующих процесс входа на основе пароля, пользователи либо сами регистрируют учетную запись, либо администратор назначает им учетную запись. Эта учетная запись связана с уникальным именем пользователя и секретным паролем, который пользователь вводит в форму входа для аутентификации.

В этом сценарии тот факт, что они знают секретный пароль, считается достаточным доказательством личности пользователя. Это означает, что безопасность веб-сайта будет поставлена под угрозу, если злоумышленник сможет получить или угадать учетные данные другого пользователя.

Этого можно добиться несколькими способами. В следующих разделах показано, как злоумышленник может использовать атаки методом перебора, а также некоторые недостатки защиты методом перебора. Вы также узнаете об уязвимостях базовой аутентификации HTTP.

# Атаки грубой силы
Brute-force attacks

Атака методом перебора — это когда злоумышленник использует систему проб и ошибок, чтобы угадать действительные учетные данные пользователя. Эти атаки обычно автоматизируются с использованием списков имен пользователей и паролей. Автоматизация этого процесса, особенно с использованием специальных инструментов, потенциально позволяет злоумышленнику совершать огромное количество попыток входа в систему на высокой скорости.

Брутфорс – это не всегда просто случайный подбор имен пользователей и паролей. Используя базовую логику или общедоступные знания, злоумышленники могут точно настроить атаки методом перебора, чтобы сделать гораздо более обоснованные предположения. Это значительно повышает эффективность подобных атак. Веб-сайты, которые используют вход на основе пароля в качестве единственного метода аутентификации пользователей, могут быть очень уязвимыми, если они не реализуют достаточную защиту от перебора.


# Брутфорс имен пользователей
Brute-forcing usernames

Имена пользователей особенно легко угадать, если они соответствуют узнаваемому шаблону, например адресу электронной почты. Например, очень часто можно увидеть бизнес-логины в формате имя.фамилия@некотораякомпания.com. Однако даже если очевидной закономерности нет, иногда даже учетные записи с высокими привилегиями создаются с использованием предсказуемых имен пользователей, таких как admin или администратор.

Во время аудита проверьте, раскрывает ли сайт публично потенциальные имена пользователей. Например, можете ли вы получить доступ к профилям пользователей без входа в систему? Даже если фактическое содержимое профилей скрыто, имя, используемое в профиле, иногда совпадает с именем пользователя для входа. Вам также следует проверить ответы HTTP, чтобы узнать, раскрыты ли какие-либо адреса электронной почты. Иногда ответы содержат адреса электронной почты пользователей с высокими привилегиями, например администраторов или сотрудников ИТ-поддержки.


# Подбор паролей
Brute-forcing passwords

Пароли также могут быть подобраны методом перебора, причем сложность зависит от сложности пароля. Многие веб-сайты применяют ту или иную форму политики паролей, которая вынуждает пользователей создавать пароли с высокой энтропией, которые, по крайней мере теоретически, труднее взломать, используя только грубую силу. Обычно это включает в себя принудительное использование паролей с помощью:

     Минимальное количество символов
     Смесь строчных и прописных букв
     Хотя бы один специальный символ
     
# Подбор паролей – продолжение
Brute-forcing passwords - Continued

Однако, хотя пароли с высокой энтропией сложно взломать только компьютерам, мы можем использовать базовые знания о человеческом поведении, чтобы использовать уязвимости, которые пользователи невольно привносят в эту систему. Вместо того, чтобы создавать надежный пароль со случайной комбинацией символов, пользователи часто берут пароль, который они могут запомнить, и пытаются взломать его, чтобы он соответствовал политике паролей. Например, если mypassword не разрешен, пользователи могут попробовать что-то вроде Mypassword1! или вместо этого Myp4$$w0rd.

В тех случаях, когда политика требует, чтобы пользователи регулярно меняли свои пароли, пользователи также обычно вносят незначительные, предсказуемые изменения в свой предпочтительный пароль. Например, Mypassword1! становится Mypassword1? или Mypassword2!.

Знание вероятных учетных данных и предсказуемых шаблонов означает, что атаки методом перебора часто могут быть гораздо более изощренными и, следовательно, эффективными, чем простое перебор всех возможных комбинаций символов.


# Перечисление имени пользователя
Username enumeration

Перечисление имен пользователей — это когда злоумышленник может наблюдать изменения в поведении веб-сайта, чтобы определить, является ли данное имя пользователя действительным.

Перечисление имени пользователя обычно происходит либо на странице входа, например, когда вы вводите действительное имя пользователя, но неправильный пароль, либо в формах регистрации, когда вы вводите уже занятое имя пользователя. Это значительно сокращает время и усилия, необходимые для подбора логина, поскольку злоумышленник может быстро создать короткий список действительных имен пользователей.

# Перечисление имен пользователей – продолжение
Username enumeration - Continued

При попытке перебора страницы входа вам следует обратить особое внимание на любые различия в:

     Коды состояния. Во время атаки методом перебора возвращаемый код состояния HTTP, скорее всего, будет одинаковым для подавляющего большинства предположений, поскольку большинство из них будут неправильными. Если предположение возвращает другой код состояния, это является убедительным признаком того, что имя пользователя было правильным. Лучше всего, чтобы веб-сайты всегда возвращали один и тот же код состояния независимо от результата, но эта практика не всегда соблюдается.
     Сообщения об ошибках: иногда возвращаемое сообщение об ошибке различается в зависимости от того, неверны ли имя пользователя и пароль или неверен только пароль. На веб-сайтах рекомендуется использовать одинаковые общие сообщения в обоих случаях, но иногда случаются небольшие ошибки при вводе. Всего лишь один неуместный символ делает два сообщения разными, даже в тех случаях, когда символ не виден на отображаемой странице.
     Время ответа: если большинство запросов были обработаны с одинаковым временем ответа, любое отклонение от этого значения предполагает, что за кулисами происходило что-то другое. Это еще один признак того, что угаданное имя пользователя может быть правильным. Например, веб-сайт может проверять правильность пароля только в том случае, если имя пользователя действительно. Этот дополнительный шаг может привести к небольшому увеличению времени ответа. Это может быть незаметно, но злоумышленник может сделать эту задержку более очевидной, введя слишком длинный пароль, на обработку которого веб-сайту потребуется заметно больше времени.


# Недостаточная защита от грубой силы
Flawed brute-force protection

Весьма вероятно, что атака методом перебора потребует множества неудачных догадок, прежде чем злоумышленник успешно скомпрометирует учетную запись. Логично, что защита от перебора заключается в попытке максимально усложнить автоматизацию процесса и замедлить скорость, с которой злоумышленник может попытаться войти в систему. Два наиболее распространенных способа предотвращения атак грубой силы:

     Блокировка учетной записи, к которой пытается получить доступ удаленный пользователь, если он делает слишком много неудачных попыток входа в систему.
     Блокировка IP-адреса удаленного пользователя, если он делает слишком много попыток входа в систему в быстрой последовательности.

Оба подхода предлагают разную степень защиты, но ни один из них не является неуязвимым, особенно если он реализован с использованием ошибочной логики.

Например, иногда вы можете обнаружить, что ваш IP-адрес заблокирован, если вам не удается войти в систему слишком много раз. В некоторых реализациях счетчик количества неудачных попыток сбрасывается, если владелец IP успешно входит в систему. Это означает, что злоумышленнику просто придется входить в свою учетную запись каждые несколько попыток, чтобы предотвратить достижение этого предела.

В этом случае простого включения ваших собственных учетных данных через регулярные промежутки времени в список слов достаточно, чтобы сделать эту защиту практически бесполезной.


# Блокировка аккаунта
Account locking

Один из способов, с помощью которого веб-сайты пытаются предотвратить перебор, — это заблокировать учетную запись, если выполняются определенные подозрительные критерии, обычно это определенное количество неудачных попыток входа в систему. Как и в случае обычных ошибок входа в систему, ответы сервера о том, что учетная запись заблокирована, также могут помочь злоумышленнику перечислить имена пользователей.

Блокировка учетной записи обеспечивает определенную степень защиты от целенаправленного перебора конкретной учетной записи. Однако этот подход не может адекватно предотвратить атаки методом перебора, при которых злоумышленник просто пытается получить доступ к любой случайной учетной записи, которую он может.

# Блокировка аккаунта – продолжение
Account locking - Continued

Например, для обхода такого рода защиты можно использовать следующий метод:

     Создайте список имен пользователей-кандидатов, которые могут оказаться действительными. Это может быть посредством перечисления имен пользователей или просто на основе списка общих имен пользователей.
     Определите очень небольшой список паролей, которые, по вашему мнению, могут быть у хотя бы одного пользователя. Важно отметить, что количество выбранных вами паролей не должно превышать количество разрешенных попыток входа в систему. Например, если вы установили, что ограничение составляет 3 попытки, вам нужно выбрать максимум 3 попытки угадать пароль.
     Используя такой инструмент, как Burp Intrumer, попробуйте каждый из выбранных паролей с каждым из имен пользователей-кандидатов. Таким образом, вы можете попытаться взломать каждую учетную запись, не вызывая блокировки учетной записи. Вам нужно только одному пользователю использовать один из трех паролей, чтобы скомпрометировать учетную запись.
     
# Блокировка аккаунта – продолжение

Account locking - Continued

Блокировка учетной записи также не может защитить от атак с подтасовкой учетных данных. Это предполагает использование огромного словаря пар имя username:password, состоящего из подлинных учетных данных для входа, украденных в результате утечки данных. Подстановка учетных данных основана на том факте, что многие люди повторно используют одно и то же имя пользователя и пароль на нескольких веб-сайтах, и, следовательно, существует вероятность того, что некоторые из скомпрометированных учетных данных в словаре также действительны на целевом веб-сайте. Блокировка учетной записи не защищает от подмены учетных данных, поскольку каждое имя пользователя вводится только один раз. Вброс учетных данных особенно опасен, поскольку иногда он может привести к тому, что злоумышленник скомпрометирует множество разных учетных записей с помощью всего лишь одной автоматической атаки.     


# Ограничение скорости пользователя
User rate limiting

Еще один способ, с помощью которого веб-сайты пытаются предотвратить атаки грубой силы, — это ограничение количества пользователей. В этом случае если вы сделаете слишком много запросов на вход в течение короткого периода времени, ваш IP-адрес будет заблокирован. Обычно IP можно разблокировать только одним из следующих способов:

     Автоматически по истечении определенного периода времени
     Вручную администратором
     Вручную пользователем после успешного прохождения CAPTCHA.

Ограничение количества пользователей иногда предпочтительнее блокировки учетной записи, поскольку оно менее подвержено перечислению имен пользователей и атакам типа «отказ в обслуживании». Однако он по-прежнему не является полностью безопасным. Как мы видели в предыдущем лабораторном примере, злоумышленник может манипулировать своим видимым IP-адресом несколькими способами, чтобы обойти блокировку.

Поскольку ограничение основано на частоте HTTP-запросов, отправленных с IP-адреса пользователя, иногда также возможно обойти эту защиту, если вы умеете угадывать несколько паролей с помощью одного запроса.


# Базовая HTTP-аутентификация
HTTP basic authentication

Несмотря на то, что он довольно старый, его относительная простота и легкость реализации означают, что иногда вы можете увидеть использование базовой аутентификации HTTP. При базовой аутентификации HTTP клиент получает от сервера токен аутентификации, который создается путем объединения имени пользователя и пароля и их кодирования в Base64. Этот токен хранится и управляется браузером, который автоматически добавляет его в заголовок Authorization каждого последующего запроса следующим образом:
Authorization: Basic base64(username:password) 

# Базовая аутентификация HTTP – продолжение

По ряду причин этот метод обычно не считается безопасным методом аутентификации. Во-первых, он предполагает повторную отправку учетных данных пользователя при каждом запросе. Если на веб-сайте также не реализован HSTS, учетные данные пользователя могут быть перехвачены в результате атаки «человек посередине».

Кроме того, реализации базовой аутентификации HTTP часто не поддерживают защиту от перебора. Поскольку токен состоит исключительно из статических значений, это может сделать его уязвимым для грубого взлома.

Базовая аутентификация HTTP также особенно уязвима для эксплойтов, связанных с сеансом, в частности CSRF, от которых она сама по себе не обеспечивает защиты.

В некоторых случаях использование уязвимой базовой аутентификации HTTP может предоставить злоумышленнику только доступ к, казалось бы, неинтересной странице. Однако, помимо предоставления дополнительной поверхности для атаки, предоставленные таким образом учетные данные могут быть повторно использованы в других, более конфиденциальных контекстах.

