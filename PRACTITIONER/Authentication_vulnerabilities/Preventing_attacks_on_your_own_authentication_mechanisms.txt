https://portswigger.net/web-security/learning-paths/authentication-vulnerabilities/preventing-attacks-on-your-own-authentication-mechanisms/authentication/preventing-attacks-on-your-own-authentication-mechanisms

# Предотвращение атак на ваши собственные механизмы аутентификации
Preventing attacks on your own authentication mechanisms

Мы продемонстрировали несколько способов, которыми веб-сайты могут быть уязвимы из-за того, как они реализуют аутентификацию. Чтобы снизить риск подобных атак на ваши собственные веб-сайты, существует несколько принципов, которым вы всегда должны следовать.

# Будьте осторожны с учетными данными пользователя
Take care with user credentials

Даже самые надежные механизмы аутентификации будут неэффективны, если вы невольно раскроете злоумышленнику действительный набор учетных данных для входа. Само собой разумеется, что вы никогда не должны отправлять данные для входа в систему по незашифрованным соединениям. Хотя вы, возможно, внедрили HTTPS для своих запросов на вход, убедитесь, что вы применяете это, также перенаправляя любые попытки HTTP-запросов на HTTPS.

Вам также следует провести аудит своего веб-сайта, чтобы убедиться, что никакое имя пользователя или адреса электронной почты не раскрываются ни через общедоступные профили, ни, например, не отражаются в ответах HTTP.

# Не рассчитывайте на безопасность пользователей
Don't count on users for security

Строгие меры аутентификации часто требуют от ваших пользователей дополнительных усилий. Человеческая природа делает почти неизбежным то, что некоторые пользователи найдут способы избавить себя от этих усилий. Поэтому вам необходимо обеспечить безопасное поведение везде, где это возможно.

Самый очевидный пример — реализация эффективной политики паролей. Некоторые из более традиционных политик терпят неудачу, потому что люди встраивают в политику свои собственные предсказуемые пароли. Вместо этого может оказаться более эффективным реализовать какую-нибудь простую программу проверки паролей, которая позволит пользователям экспериментировать с паролями и предоставит информацию об их надежности в режиме реального времени. Популярным примером является библиотека JavaScript zxcvbn, разработанная Dropbox. Разрешив использовать только те пароли, которые имеют высокую оценку средства проверки паролей, вы можете обеспечить более эффективное использование безопасных паролей, чем при использовании традиционных политик.

# Запретить перечисление имен пользователей
Prevent username enumeration

Злоумышленнику значительно легче взломать ваши механизмы аутентификации, если вы обнаружите, что в системе существует пользователь. Существуют даже определенные ситуации, когда из-за особенностей веб-сайта знание о том, что у конкретного человека есть учетная запись, само по себе является конфиденциальной информацией.

Независимо от того, является ли введенное имя пользователя действительным, важно использовать одинаковые общие сообщения об ошибках и убедиться, что они действительно идентичны. Вы должны всегда возвращать один и тот же код состояния HTTP при каждом запросе на вход и, наконец, сделать время ответа в разных сценариях как можно более неразличимым.

# Внедрить надежную защиту от грубой силы
Implement robust brute-force protection

Учитывая, насколько простой может быть организация атаки методом перебора, крайне важно принять меры для предотвращения или, по крайней мере, пресечения любых попыток перебора входа в систему.

Одним из наиболее эффективных методов является внедрение строгого ограничения скорости пользователей на основе IP. Это должно включать меры, предотвращающие манипулирование злоумышленниками своим очевидным IP-адресом. В идеале вы должны требовать от пользователя прохождения теста CAPTCHA при каждой попытке входа в систему после достижения определенного предела.

Имейте в виду, что это не гарантирует полного устранения угрозы брутфорса. Однако если сделать этот процесс максимально утомительным и ручным, это увеличит вероятность того, что любой потенциальный злоумышленник сдастся и вместо этого отправится на поиски более слабой цели.

# Трижды проверьте логику проверки.
Triple-check your verification logic

Как показали наши лаборатории, простые логические ошибки легко проникают в код, который в случае аутентификации может полностью скомпрометировать ваш веб-сайт и пользователей. Тщательный аудит любой логики проверки или проверки для устранения недостатков является абсолютным ключом к надежной аутентификации. Проверка, которую можно обойти, в конечном счете, ненамного лучше, чем отсутствие проверки вообще.

# Не забывайте о дополнительных функциях
Don't forget supplementary functionality

Не сосредотачивайтесь только на центральных страницах входа и не упускайте из виду дополнительные функции, связанные с аутентификацией. Это особенно важно в тех случаях, когда злоумышленник может зарегистрировать собственную учетную запись и изучить эту функцию. Помните, что сброс или изменение пароля — это такая же действительная поверхность атаки, как и основной механизм входа в систему, и, следовательно, он должен быть столь же надежным.

# Внедрить правильную многофакторную аутентификацию
Implement proper multi-factor authentication

Хотя многофакторная аутентификация может быть нецелесообразной для каждого веб-сайта, при правильном выполнении она намного безопаснее, чем вход в систему только с помощью пароля. Помните, что проверка нескольких экземпляров одного и того же фактора не является настоящей многофакторной аутентификацией. Отправка кодов подтверждения по электронной почте — это, по сути, просто более сложная форма однофакторной аутентификации.

2FA на основе SMS технически проверяет два фактора (то, что вы знаете, и то, что у вас есть). Однако возможность злоупотреблений, например, при замене SIM-карты, означает, что эта система может быть ненадежной.

В идеале 2FA должна быть реализована с использованием специального устройства или приложения, которое напрямую генерирует код подтверждения. Поскольку они созданы специально для обеспечения безопасности, они обычно более безопасны.

Наконец, как и в случае с основной логикой аутентификации, убедитесь, что логика ваших проверок 2FA верна, чтобы ее нельзя было легко обойти.

