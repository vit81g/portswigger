# Уязвимости в других механизмах аутентификации
Vulnerabilities in other authentication mechanisms

В дополнение к основным функциям входа в систему большинство веб-сайтов предоставляют дополнительные функции, позволяющие пользователям управлять своей учетной записью. Например, пользователи обычно могут изменить свой пароль или сбросить пароль, если забудут его. Эти механизмы также могут создавать уязвимости, которыми может воспользоваться злоумышленник.

Веб-сайты обычно стараются избегать известных уязвимостей на своих страницах входа. Но легко упустить из виду тот факт, что вам необходимо предпринять аналогичные шаги, чтобы обеспечить такую ​​же надежность соответствующей функциональности. Это особенно важно в тех случаях, когда злоумышленник имеет возможность создать собственную учетную запись и, следовательно, имеет легкий доступ к изучению этих дополнительных страниц.

# Удержание пользователей в системе
Keeping users logged in

Общей особенностью является возможность оставаться в системе даже после закрытия сеанса браузера. Обычно это простой флажок с надписью что-то вроде «Запомнить меня» или «Оставать меня в системе».

Эта функциональность часто реализуется путем создания какого-либо токена «запомнить меня», который затем сохраняется в постоянном файле cookie. Поскольку обладание этим файлом cookie позволяет вам фактически обойти весь процесс входа в систему, рекомендуется, чтобы этот файл cookie был непрактичным для угадывания. Однако некоторые веб-сайты генерируют этот файл cookie на основе предсказуемого объединения статических значений, таких как имя пользователя и временная метка. Некоторые даже используют пароль как часть файла cookie. Этот подход особенно опасен, если злоумышленник может создать свою собственную учетную запись, поскольку он может изучить свой собственный файл cookie и потенциально понять, как он генерируется. Как только они разработают формулу, они смогут попытаться перебрать файлы cookie других пользователей, чтобы получить доступ к их учетным записям.


# Удержание пользователей в системе – продолжение
Keeping users logged in - Continued

Некоторые веб-сайты предполагают, что если файл cookie каким-либо образом зашифрован, его невозможно будет угадать, даже если он использует статические значения. Хотя это может быть правдой, если все сделано правильно, наивное «шифрование» файла cookie с использованием простой двусторонней кодировки, такой как Base64, не обеспечивает никакой защиты. Даже использование правильного шифрования с односторонней хэш-функцией не является полностью надежным. Если злоумышленник может легко идентифицировать алгоритм хеширования и соль не используется, он потенциально может перебрать файл cookie, просто хешируя свои списки слов. Этот метод можно использовать для обхода ограничений на попытки входа в систему, если аналогичный лимит не применяется к предположениям файлов cookie.

Даже если злоумышленник не сможет создать свою собственную учетную запись, он все равно сможет воспользоваться этой уязвимостью. Используя обычные методы, такие как XSS, злоумышленник может украсть файл cookie «запомнить меня» другого пользователя и определить, как на его основе создается файл cookie. Если веб-сайт был создан с использованием платформы с открытым исходным кодом, ключевые детали создания файлов cookie могут даже быть публично задокументированы.

# Удержание пользователей в системе – продолжение
Keeping users logged in - Continued

В некоторых редких случаях можно получить действительный пароль пользователя в открытом виде из файла cookie, даже если он хеширован. Хешированные версии списков известных паролей доступны в Интернете, поэтому, если пароль пользователя появляется в одном из этих списков, расшифровка хеша иногда может быть столь же тривиальной, как просто вставка хеша в поисковую систему. Это демонстрирует важность соли в эффективном шифровании.

# Resetting user passwords
Сброс паролей пользователей

На практике некоторые пользователи забывают свой пароль, поэтому обычно у них есть возможность сбросить его. Поскольку обычная аутентификация на основе пароля в этом сценарии явно невозможна, веб-сайтам приходится полагаться на альтернативные методы, чтобы убедиться, что реальный пользователь сбрасывает свой собственный пароль. По этой причине функция сброса пароля по своей сути опасна и должна быть реализована безопасно.

Существует несколько различных способов реализации этой функции с разной степенью уязвимости.

# Отправка паролей по электронной почте
Sending passwords by email

Само собой разумеется, что отправка пользователям их текущего пароля никогда не будет возможной, если веб-сайт изначально безопасно обрабатывает пароли. Вместо этого некоторые веб-сайты генерируют новый пароль и отправляют его пользователю по электронной почте.

Вообще говоря, следует избегать отправки постоянных паролей по незащищенным каналам. В этом случае безопасность зависит либо от истечения срока действия сгенерированного пароля через очень короткий период времени, либо от того, что пользователь немедленно снова меняет свой пароль. В противном случае этот подход очень чувствителен к атакам типа «человек посередине».

Электронная почта также обычно не считается безопасной, поскольку почтовые ящики являются постоянными и не предназначены для безопасного хранения конфиденциальной информации. Многие пользователи также автоматически синхронизируют свои входящие сообщения между несколькими устройствами по незащищенным каналам.

# Сброс паролей с помощью URL-адреса
Resetting passwords using a URL

Более надежный метод сброса паролей — отправить пользователям уникальный URL-адрес, который приведет их на страницу сброса пароля. Менее безопасные реализации этого метода используют URL-адрес с легко угадываемым параметром, чтобы определить, какая учетная запись сбрасывается, например:
http://vulnerable-website.com/reset-password?user=victim-user

В этом примере злоумышленник может изменить параметр пользователя, чтобы он ссылался на любое идентифицированное им имя пользователя. Затем они будут перенаправлены прямо на страницу, где потенциально смогут установить новый пароль для этого произвольного пользователя.

# Сброс паролей с помощью URL-адреса – продолжение
Resetting passwords using a URL - Continued

Лучшая реализация этого процесса — создать высокоэнтропийный, трудно угадываемый токен и на его основе создать URL-адрес сброса. В лучшем случае этот URL-адрес не должен содержать подсказок о том, пароль какого пользователя сбрасывается.
http://vulnerable-website.com/reset-password?token=a0ba0d1cb3b63d13822572fcff1a241895d893f659164d4cc550b421ebdd48a8

Когда пользователь посещает этот URL-адрес, система должна проверить, существует ли этот токен на серверной стороне, и если да, то пароль какого пользователя он должен сбросить. Этот токен должен истечь через короткий период времени и быть уничтожен сразу после сброса пароля.

Однако некоторые веб-сайты не могут повторно проверить токен при отправке формы сброса. В этом случае злоумышленник может просто посетить форму сброса из своей учетной записи, удалить токен и использовать эту страницу для сброса пароля произвольного пользователя.

# Сброс паролей с помощью URL-адреса – продолжение
Resetting passwords using a URL - Continued

Если URL-адрес в электронном письме для сброса генерируется динамически, он также может быть уязвим для отравления при сбросе пароля. В этом случае злоумышленник потенциально может украсть токен другого пользователя и с его помощью изменить свой пароль.


# Изменение паролей пользователей
Changing user passwords

Обычно для изменения пароля необходимо ввести текущий пароль, а затем дважды ввести новый пароль. Эти страницы по сути используют тот же процесс проверки соответствия имен пользователей и текущих паролей, что и обычная страница входа в систему. Следовательно, эти страницы могут быть уязвимы для одних и тех же методов.

Функция смены пароля может быть особенно опасной, если она позволяет злоумышленнику получить к ней прямой доступ, не входя в систему как пользователь-жертва. Например, если имя пользователя указано в скрытом поле, злоумышленник может изменить это значение в запросе, нацеленном на произвольных пользователей. Потенциально это можно использовать для перебора имен пользователей и паролей методом перебора.
