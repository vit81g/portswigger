What are file upload vulnerabilities?
Каковы уязвимости при загрузке файлов?

Уязвимости загрузки файлов — это когда веб-сервер позволяет пользователям загружать файлы в свою файловую систему без достаточной проверки таких параметров, как их имя, тип, содержимое или размер. Неспособность должным образом обеспечить соблюдение этих ограничений может означать, что вместо этого даже базовая функция загрузки изображений может использоваться для загрузки произвольных и потенциально опасных файлов. Сюда могут даже относиться файлы сценариев на стороне сервера, обеспечивающие удаленное выполнение кода.

В некоторых случаях загрузки файла само по себе достаточно, чтобы нанести ущерб. Другие атаки могут включать последующий HTTP-запрос файла, обычно для запуска его выполнения сервером.

Как возникают уязвимости при загрузке файлов?

Учитывая довольно очевидные опасности, редко когда веб-сайты в дикой природе не имеют каких-либо ограничений на то, какие файлы разрешено загружать пользователям. Чаще всего разработчики реализуют то, что они считают надежной проверкой, которая либо изначально ошибочна, либо ее можно легко обойти.

Например, они могут попытаться занести в черный список опасные типы файлов, но не смогут учесть расхождения в синтаксическом анализе при проверке расширений файлов. Как и в любом черном списке, здесь также легко случайно пропустить более малоизвестные типы файлов, которые все еще могут быть опасными.

Использование неограниченной загрузки файлов для развертывания веб-оболочки

С точки зрения безопасности наихудший возможный сценарий — это когда веб-сайт позволяет загружать серверные сценарии, такие как файлы PHP, Java или Python, а также настроен на их выполнение в виде кода. Это упрощает создание собственной веб-оболочки на сервере.
Веб-оболочка

Веб-оболочка — это вредоносный сценарий, который позволяет злоумышленнику выполнять произвольные команды на удаленном веб-сервере, просто отправляя HTTP-запросы в нужную конечную точку.

Если вам удастся успешно загрузить веб-оболочку, вы фактически получите полный контроль над сервером. Это означает, что вы можете читать и записывать произвольные файлы, извлекать конфиденциальные данные и даже использовать сервер для развертывания атак как на внутреннюю инфраструктуру, так и на другие серверы за пределами сети. Например, следующая однострочная строка PHP может использоваться для чтения произвольных файлов из файловой системы сервера:

<?php echo file_get_contents('/path/to/target/file'); ?>

После загрузки отправка запроса на этот вредоносный файл вернет в ответ содержимое целевого файла.

Более универсальная веб-оболочка может выглядеть примерно так:
<?php echo system($_GET['command']); ?>

Этот сценарий позволяет передавать произвольную системную команду через параметр запроса следующим образом:
GET /example/exploit.php?command=id HTTP/1.1



Использование ошибочной проверки загрузки файлов

В реальной жизни вы вряд ли найдете веб-сайт, не имеющий защиты от атак с загрузкой файлов, как мы видели в предыдущей лабораторной работе. Но то, что защита имеется, не означает, что она надежна. Иногда вы все еще можете использовать недостатки этих механизмов, чтобы получить веб-оболочку для удаленного выполнения кода.


Неверная проверка типа файла

При отправке HTML-форм браузер обычно отправляет предоставленные данные в запросе POST с типом контента application/x-www-form-url-encoded. Это подходит для отправки простого текста, например вашего имени или адреса. Однако он не подходит для отправки больших объемов двоичных данных, таких как весь файл изображения или документ PDF. В этом случае предпочтительным является тип контента multipart/form-data.


Неверная проверка типа файла. Продолжение.

Рассмотрим форму, содержащую поля для загрузки изображения, его описания и ввода вашего имени пользователя. Отправка такой формы может привести к запросу, который выглядит примерно так:

POST /images HTTP/1.1
    Host: normal-website.com
    Content-Length: 12345
    Content-Type: multipart/form-data; boundary=---------------------------012345678901234567890123456

    ---------------------------012345678901234567890123456
    Content-Disposition: form-data; name="image"; filename="example.jpg"
    Content-Type: image/jpeg

    [...binary content of example.jpg...]

    ---------------------------012345678901234567890123456
    Content-Disposition: form-data; name="description"

    This is an interesting description of my image.

    ---------------------------012345678901234567890123456
    Content-Disposition: form-data; name="username"

    wiener
    ---------------------------012345678901234567890123456--


Как видите, тело сообщения разделено на отдельные части для каждого ввода формы. Каждая часть содержит заголовок Content-Disposition, который предоставляет некоторую базовую информацию о поле ввода, к которому она относится. Эти отдельные части также могут содержать собственный заголовок Content-Type, который сообщает серверу MIME-тип данных, отправленных с использованием этих входных данных.

Неверная проверка типа файла. Продолжение.

Один из способов, с помощью которого веб-сайты могут попытаться проверить загрузку файлов, — это проверить, соответствует ли этот заголовок Content-Type, специфичный для ввода, ожидаемому типу MIME. Например, если сервер ожидает только файлы изображений, он может разрешать только такие типы, как image/jpeg и image/png. Проблемы могут возникнуть, если сервер неявно доверяет значению этого заголовка. Если дальнейшая проверка не выполняется, чтобы проверить, действительно ли содержимое файла соответствует предполагаемому типу MIME, эту защиту можно легко обойти с помощью таких инструментов, как Burp Repeater.
