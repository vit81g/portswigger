SQL injection
What is SQL injection (SQLi)?
SQL-инъекция (SQLi) — это уязвимость веб-безопасности, которая позволяет злоумышленнику вмешиваться в запросы, которые приложение отправляет в свою базу данных. Это может позволить злоумышленнику просмотреть данные, которые он обычно не может получить. Сюда могут входить данные, принадлежащие другим пользователям, или любые другие данные, к которым приложение может получить доступ. Во многих случаях злоумышленник может изменить или удалить эти данные, вызывая постоянные изменения в содержимом или поведении приложения.

В некоторых ситуациях злоумышленник может расширить атаку с помощью SQL-инъекций, чтобы поставить под угрозу базовый сервер или другую внутреннюю инфраструктуру. Это также может позволить им выполнять атаки типа «отказ в обслуживании».

Как обнаружить уязвимости SQL-инъекций

Вы можете обнаружить SQL-инъекцию вручную, используя систематический набор тестов для каждой точки входа в приложении. Для этого вы обычно отправляете:

     Символ одинарной кавычки ' и найдите ошибки или другие аномалии.
     Некоторый синтаксис, специфичный для SQL, который оценивает базовое (исходное) значение точки входа и другое значение и ищет систематические различия в ответах приложения.
     Логические условия, такие как OR 1=1 и OR 1=2, и найдите различия в ответах приложения.
     Полезные нагрузки, предназначенные для запуска временных задержек при выполнении SQL-запроса и поиска различий во времени, необходимом для ответа.
     Полезные нагрузки OAST, предназначенные для запуска внеполосного сетевого взаимодействия при выполнении в рамках SQL-запроса и отслеживания любых результирующих взаимодействий.

Кроме того, вы можете быстро и надежно найти большинство уязвимостей SQL-инъекций с помощью Burp Scanner.

Получение скрытых данных

Представьте себе приложение для покупок, которое отображает товары в разных категориях. Когда пользователь нажимает на категорию «Gifts», его браузер запрашивает URL-адрес:
https://insecure-website.com/products?category=Gifts

Это заставляет приложение выполнять SQL-запрос для получения сведений о соответствующих продуктах из базы данных:
SELECT * FROM products WHERE category = 'Gifts' AND released = 1

Этот SQL-запрос просит базу данных вернуть:

    all details (*)
    from the products table
    where the category is Gifts
    and released is 1.


Ограничение released = 1 используется для сокрытия невыпущенных продуктов. Мы могли бы предположить, что для невыпущенных продуктов released = 0.


Получение скрытых данных – продолжение

Приложение не реализует никакой защиты от атак SQL-инъекций. Это означает, что злоумышленник может построить следующую атаку, например:
https://insecure-website.com/products?category=Gifts'--

В результате получается SQL-запрос:
SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1

Важно отметить, что -- является индикатором комментария в SQL. Это означает, что остальная часть запроса интерпретируется как комментарий и фактически удаляется. В данном примере это означает, что запрос больше не включает AND released = 1. В результате отображаются все продукты, включая те, которые еще не выпущены.

Вы можете использовать подобную атаку, чтобы заставить приложение отображать все продукты в любой категории, включая категории, о которых они не знают:
https://insecure-website.com/products?category=Gifts'+OR+1=1--

В результате получается SQL-запрос:
SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1

Модифицированный запрос возвращает все элементы, у которых либо category «Gifts», либо 1 равно 1. Поскольку 1=1 всегда истинно, запрос возвращает все элементы.

Предупреждение

Будьте осторожны при внедрении условия OR 1=1 в SQL-запрос. Даже если это кажется безобидным в контексте, в который вы внедряете, приложения обычно используют данные из одного запроса в нескольких разных запросах. Например, если ваше условие достигает оператора UPDATE или DELETE, это может привести к случайной потере данных.

Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data

Лабораторная работа: Уязвимость внедрения SQL в предложении WHERE, позволяющая извлекать скрытые данные.


Эта лабораторная работа содержит уязвимость внедрения SQL в фильтре категорий продуктов. Когда пользователь выбирает категорию, приложение выполняет SQL-запрос, подобный следующему:
ВЫБЕРИТЕ * ИЗ товаров ГДЕ категория = «Подарки» И выпущено = 1

Чтобы решить лабораторную задачу, выполните атаку с помощью SQL-инъекции, в результате которой приложение отображает один или несколько невыпущенных продуктов.

Решение

     Используйте Burp Suite, чтобы перехватить и изменить запрос, который устанавливает фильтр категории продукта.
     Измените параметр категории, присвоив ему значение '+OR+1=1--
     Отправьте запрос и убедитесь, что ответ теперь содержит один или несколько невыпущенных продуктов.
     
1. start Burp Suite
2. Фильтпуем товары (в нашем случаее по Gifts)
3. В HTTP history ищем запрос типа /filter?category=Gifts
GET /filter?category=Gifts HTTP/2
Host: 0aa20062041882f282fb1f3000f8004f.web-security-academy.net
Cookie: session=R4mVCKVyItduJj9vNqLEozBVBhalaRIs
Sec-Ch-Ua: "Not(A:Brand";v="24", "Chromium";v="122"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Linux"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://0aa20062041882f282fb1f3000f8004f.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i

4. отправлеяем его в Repeater и модифицируем GET /filter?category=Gifts HTTP/2  на

GET /filter?category=Gifts'+OR+1=1-- HTTP/2
отправляем запрос Send

5. Это же можно сделать в строке браузера:
https://0aa20062041882f282fb1f3000f8004f.web-security-academy.net/filter?category=Gifts%27+OR+1=1--

Мы увидим все товары.
