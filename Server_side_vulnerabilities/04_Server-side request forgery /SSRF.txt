What is SSRF?

Подделка запросов на стороне сервера — это уязвимость веб-безопасности, которая позволяет злоумышленнику заставить серверное приложение отправлять запросы в непредусмотренное место.

При типичной атаке SSRF злоумышленник может заставить сервер подключиться к внутренним службам в инфраструктуре организации. В других случаях они могут заставить сервер подключиться к произвольным внешним системам. Это может привести к утечке конфиденциальных данных, таких как учетные данные авторизации.

SSRF-атаки на сервер

При атаке SSRF на сервер злоумышленник заставляет приложение отправить HTTP-запрос обратно на сервер, на котором размещено приложение, через сетевой интерфейс обратной связи. Обычно это предполагает предоставление URL-адреса с именем хоста, например 127.0.0.1 (зарезервированный IP-адрес, указывающий на адаптер обратной связи) или localhost (обычно используемое имя для того же адаптера).

Например, представьте себе приложение для покупок, которое позволяет пользователю видеть, есть ли товар на складе в определенном магазине. Чтобы предоставить биржевую информацию, приложение должно запрашивать различные серверные API REST. Это делается путем передачи URL-адреса соответствующей конечной точке внутреннего API через внешний HTTP-запрос. Когда пользователь просматривает статус товара на складе, его браузер отправляет следующий запрос:
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1


Это заставляет сервер делать запрос по указанному URL-адресу, получать статус запасов и возвращать его пользователю.

В этом примере злоумышленник может изменить запрос, указав URL-адрес, локальный для сервера:

POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://localhost/admin

Сервер извлекает содержимое URL-адреса /admin и возвращает его пользователю.

Злоумышленник может посетить URL-адрес /admin, но функции администрирования обычно доступны только прошедшим проверку подлинности пользователям. Это означает, что злоумышленник не увидит ничего интересного. Однако если запрос к URL-адресу /admin поступает с локального компьютера, обычные средства управления доступом обойдут. Приложение предоставляет полный доступ к административным функциям, поскольку запрос исходит из надежного места.


SSRF-атаки на сервер – продолжение

Почему приложения ведут себя таким образом и неявно доверяют запросам, поступающим с локальной машины? Это может возникнуть по разным причинам:

     Проверка контроля доступа может быть реализована в другом компоненте, который находится перед сервером приложений. При обратном соединении с сервером проверка пропускается.
     В целях аварийного восстановления приложение может разрешить административный доступ без входа в систему любому пользователю, пришедшему с локального компьютера. Это дает администратору возможность восстановить систему, если он потеряет свои учетные данные. Это предполагает, что только полностью доверенный пользователь будет приходить непосредственно с сервера.
     Административный интерфейс может прослушивать другой номер порта основного приложения и может быть недоступен для пользователей напрямую.

Подобные доверительные отношения, при которых запросы, исходящие от локального компьютера, обрабатываются иначе, чем обычные запросы, часто превращают SSRF в критическую уязвимость.
